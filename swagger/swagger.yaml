openapi: 3.0.0
info:
  title: DuyPha API
  description: Describe about the API document
  version: 1.0.0

servers:
  - url: https://6om4hopl8a.execute-api.ap-southeast-1.amazonaws.com/dev
    variables:
      apiId:
        default: abc123xyz

tags:
  - name: Auth
    description: Authenticate management

  - name: User
    description: User management

  - name: Log
    description: Log management

paths:
  /admins/create:
    post:
      tags:
        - Admin
      summary: Create user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                employeeId:
                  type: string
                  example: duypha
                firstName:
                  type: string
                  example: Pham Van
                lastName:
                  type: string
                  example: Hai
                loginId:
                  type: string
                  format: email
                  example: ph.anhduy11025@gmail.com
                isRealEmail:
                  type: boolean
                  example: false
                contactEmail:
                  type: string
                  format: email
                  example: ph.anhduy11026@gmail.com
                avatar:
                  type: string
                  format: binary
              required:
                - employeeId
                - firstName
                - loginId
      responses:
        '201':
          description: Created user successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: CREATE_USER
                  message:
                    type: string
                    example: Created user successfully.
                  newUser:
                    type: object
                    properties:
                      id:
                        type: string
                        example: PHAD0YG3T8C8YVZHR6INK1K8KC
                      employeeId:
                        type: string
                        example: duypha
                      firstName:
                        type: string
                        example: Pham Van
                      lastName:
                        type: string
                        example: Hai
                      password:
                        type: string
                        example: $2b$05$EJiulXSOzUVUUOC23DZgnu5n2GALF4SvtqH/l5F5gjN793sX8ZlTC
                      loginId:
                        type: string
                        format: email
                        example: ph.anhduy11025@gmail.com
                      isRealEmail:
                        type: string
                        enum: ['0', '1']
                        example: '1'
                      contactEmail:
                        type: string
                        example: hello@gmail.com
                      avatarUrl:
                        type: string
                        nullable: true
                        example: null
                      lastPasswordChange:
                        type: string
                        format: date-time
                        example: "2025-05-11T07:54:16.145Z"
                      updatedAt:
                        type: string
                        format: date-time
                        example: "2025-05-11T07:54:16.147Z"
                      createdAt:
                        type: string
                        format: date-time
                        example: "2025-05-11T07:54:16.147Z"
                      requiredChangePassword:
                        type: boolean
                        example: 1
                      isBlock:
                        type: boolean
                        example: false
                      failedLoginAttemptsCount:
                        type: number
                        example: 0
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  code:
                    type: string
              examples:
                validatePassword:
                  summary: Validate password
                  value:
                    message: Password is required / Password is unencrypted
                    code: PASSWORD
                validateFirstname:
                  summary: Validate firstName
                  value:
                    message: firstName is required / firstName is exceed maxlengh.
                    code: FIRSTNAME
                validateLastname:
                  summary: Validate lastName
                  value:
                    message: lastName is exceed maxlengh.
                    code: LASTNAME
                validateEmployeeId:
                  summary: Validate employeeId
                  value:
                    message: employeeId is required / employeeId is exceed maxlengh.
                    code: EMPLOYEEID
                validateLoginId:
                  summary: Validate loginId
                  value:
                    message: loginId is required / loginId is invalid
                    code: LOGINID
                validateIsRealEmail:
                  summary: Validate isRealEmail
                  value:
                    message: isRealEmail must be a `boolean` type.
                    code: ISREALEMAIL
                validateContactEmail:
                  summary: Validate contactEmail
                  value:
                    message: Contact email is required / Email is invalid.
                    code: CONTACTEMAIL
                validateAvatar:
                  summary: Validate avatar
                  value:
                    message: Failed validation
                    error:
                      code: avatar
                      message: Size limit 5MB / The type is not allow.

        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  code:
                    type: string
              examples:
                tokenisRequired:
                  summary: Token is required
                  value:
                    message: Token is required
                    code: TOKEN_IS_REQUIRED
                expiredToken:
                  summary: Token expired
                  value:
                    message: Token expired
                    code: EXPIRED_TOKEN
                invalidToken:
                  summary: Invalid token
                  value:
                    message: Invalid token
                    code: INVALID_TOKEN

        '409':
          description: Conflict
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Login ID or Employee ID is existing
                  code:
                    type: string
                    example: LOGIN_ID_OR_EMPLOYEE_ID

        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Internal server error
                  code:
                    type: string
                    example: INTERNAL_SERVER_ERROR
                  error:
                    type: object

  /admin/update:
    put:
      tags:
        - Admin
      summary: Update user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  example: KDVH3H4PNVLANZQNIF1P3I9OEI
                firstName:
                  type: string
                  example: Pham Hai Anh
                lastName:
                  type: string
                  example: Duy
                isRealEmail:
                  type: boolean
                  example: false
                contactEmail:
                  type: string
                  example: ph.anhduy1102@gmail.com
                avatar:
                  type: string
              required:
                - firstName
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Updated successfully
                  data:
                    type: object
                    properties:
                        id:
                          type: string
                          example: PHAD0YG3T8C8YVZHR6INK1K8KC
                        firstName:
                          type: string
                          example: Pham Hai Anh
                        lastName:
                          type: string
                          example: Duy
                        avatarUrl:
                          type: string
                          example: duypha
                        isRealEmail:
                          type: boolean
                          example: false
                        contactEmail:
                          type: string
                          example: ph.anhduy1102@gmail.com
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  code:
                    type: string
              examples:
                validateId:
                  summary: Validate Id
                  value:
                    message: User id is required.
                    code: USER_ID_IS_REQUIRED
                validateFirstname:
                  summary: Validate firstName
                  value:
                    message: firstName is required / firstName is exceed maxlengh.
                    code: FIRSTNAME
                validateIsRealEmail:
                  summary: Validate isRealEmail
                  value:
                    message: isRealEmail must be a `boolean` type.
                    code: ISREALEMAIL
                validateContactEmail:
                  summary: Validate contactEmail
                  value:
                    message: Contact email is required / Email is invalid.
                    code: CONTACTEMAIL
                validateAvatar:
                  summary: Validate avatar
                  value:
                    message: Failed validation
                    error:
                      code: avatar
                      message: Size limit 5MB / The type is not allow.
             
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  error:
                    type: string
              examples:
                tokenisRequired:
                  summary: Token is required
                  value:
                    message: Token is required
                    code: TOKEN_IS_REQUIRED
                expiredToken:
                  summary: Token expired
                  value:
                    message: Token expired
                    code: EXPIRED_TOKEN
                invalidToken:
                  summary: Invalid token
                  value:
                    message: Invalid token
                    code: INVALID_TOKEN

        '404':
          description: User Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User not found
                  code:
                    type: string
                    example: USER_NOT_FOUND

        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Internal server error
                  code:
                    type: string
                    example: INTERNAL_SERVER_ERROR
                  error:
                    type: object

  /admin/:userCode:
    get:
      tags:
        - Admin
      summary: Get user by userCode

      responses:
        '200':
          description: Get user by userCode
          content:
            application/json:
              schema:
                type: object
                properties:
                  userData:
                    type: object
                    properties:
                      id:
                        type: string
                        example: PHAD0YG3T8C8YVZHR6INK1K8KC
                      employeeId:
                        type: string
                        example: duypha
                      firstName:
                        type: string
                        example: Pham Hai Anh
                      lastName:
                        type: string
                        example: Duy
                      loginId:
                        type: string
                        example: duy.pha@trans-tech.vn
                      lastPasswordChange:
                        type: string
                        example: 2025-05-02T04:10:40.000Z
                      isRealEmail:
                        type: boolean
                        example: false
                      contactEmail:
                        type: string
                        example: null
                      avatarUrl:
                        type: string
                        example: https://duypha.s3.ap-southeast-1.amazonaws.com/avatars/1746159883458_cart.png
                      requiredChangePassword:
                        type: boolean
                        example: false
                      isBlock :
                        type: boolean
                        example: false

        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  error:
                    type: string
              examples:
                tokenisRequired:
                  summary: Token is required
                  value:
                    message: Token is required
                    code: TOKEN_IS_REQUIRED
                expiredToken:
                  summary: Token expired
                  value:
                    message: Token expired
                    code: EXPIRED_TOKEN
                invalidToken:
                  summary: Invalid token
                  value:
                    message: Invalid token
                    code: INVALID_TOKEN

        '404':
          description: User Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User not found
                  code:
                    type: string
                    example: USER_NOT_FOUND
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Internal server error
                  code:
                    type: string
                    example: INTERNAL_SERVER_ERROR
                  error:
                    type: object
  
  /profile-settings:
    get:
      tags:
        - Admin
      summary: Get admin by me

      responses:
        '200':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  userData:
                    type: object
                    properties:
                      id:
                        type: string
                        example: PHAD0YG3T8C8YVZHR6INK1K8KC
                      employeeId:
                        type: string
                        example: duypha
                      firstName:
                        type: string
                        example: Pham Hai Anh
                      lastName:
                        type: string
                        example: Duy
                      loginId:
                        type: string
                        example: duy.pha@trans-tech.vn
                      lastPasswordChange:
                        type: string
                        example: 2025-05-02T04:10:40.000Z
                      isRealEmail:
                        type: boolean
                        example: false
                      contactEmail:
                        type: string
                        example: null
                      avatarUrl:
                        type: string
                        example: https://duypha.s3.ap-southeast-1.amazonaws.com/avatars/1746159883458_cart.png
                      requiredChangePassword:
                        type: boolean
                        example: false
                      isBlock :
                        type: boolean
                        example: false
                  mustChangePassword:
                    type: boolean
                    example: false
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  error:
                    type: string

              examples:
                tokenisRequired:
                  summary: Token is required
                  value:
                    message: Token is required
                    code: TOKEN_IS_REQUIRED
                expiredToken:
                  summary: Token expired
                  value:
                    message: Token expired
                    code: EXPIRED_TOKEN
                invalidToken:
                  summary: Invalid token
                  value:
                    message: Invalid token
                    code: INVALID_TOKEN
        '404':
          description: User Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User not found
                  code:
                    type: string
                    example: USER_NOT_FOUND
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Internal server error
                  code:
                    type: string
                    example: INTERNAL_SERVER_ERROR
                  error:
                    type: object

  /admin/delete/:userId:
    delete:
      tags:
        - Admin
      summary: Delete user
      responses:
        '200':
          description: Deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Delete user successfully.
                  code:
                    type: string
                    example: DELETE_USER
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  error:
                    type: string

              examples:
                tokenisRequired:
                  summary: Token is required
                  value:
                    message: Token is required
                    code: TOKEN_IS_REQUIRED
                expiredToken:
                  summary: Token expired
                  value:
                    message: Token expired
                    code: EXPIRED_TOKEN
                invalidToken:
                  summary: Invalid token
                  value:
                    message: Invalid token
                    code: INVALID_TOKEN
        '404':
          description: User Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User not found
                  code:
                    type: string
                    example: USER_NOT_FOUND
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Internal server error
                  code:
                    type: string
                    example: INTERNAL_SERVER_ERROR
                  error:
                    type: object

  /admin/list:
    get:
      tags:
        - Admin
      summary: Get the list user
      parameters:
        - name: fromDate
          in: query
          schema:
            type: string
            example: 2025-05-02 00:00:00
        - name: toDate
          in: query
          schema:
            type: string
            example: 2025-05-04 23:59:59
        - name: searchString
          in: query
          schema:
            type: string
            example: duy.pha@trans-tech.vn
        - name: page
          in: query
          schema:
            type: number
            example: 1
          required: true
        - name: sortColumn
          in: query
          schema:
            type: string
            example: fullName
        - name: sortOrder
          in: query
          schema:
            type: string
            example: asc
        - name: itemPerPage
          in: query
          schema:
            type: number
            example: 5
          required: true
      responses:
        '200':
          description: Get the list user successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  listUsers:
                    type: array
                    items: 
                      type: object
                      properties:
                        id:
                          type: string
                        firstName:
                          type: string
                        lastName:
                          type: string
                        loginId:
                          type: string
                        updatedAt:
                          type: string
                    example:
                      - id: PHAD0YG3T8C8YVZHR6INK1K8KC
                        firstName: Pham Hai Anh Duy
                        lastName: Duy
                        loginId: ph.anhduy1102@gmail.com
                        updatedAt: 2025-05-02T04:10:40.000Z
                      - id: PHAD0YG3T8C8YVZHR6INK1K8KS
                        firstName: Pham Hai Anh Duy
                        lastName: Duy
                        loginId: ph.anhduy1102@gmail.com
                        updatedAt: 2025-05-01T10:20:30.000Z
                  currentPage:
                    type: number
                    example: 1
                  totalUsers:
                    type: number
                    example: 8
                  totalPages:
                    type: number
                    example: 2
                  itemPerPage:
                    type: number
                    example: 5
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  error:
                    type: object
                    properties: 
                      code:
                        type: string
                      message:
                        type: string
              examples:
                validateSortOrder:
                  summary: Validate sort order
                  value:
                    message: Order is invalid
                    code: SORTORDER

                validateSorColumn:
                  summary: Validate sort column
                  value:
                    message: Field is invalid
                    code: SORTCOLUMN

                validateFromDate:
                  summary: Validate from date
                  value:
                    message: fromDate or toDate is not a valid datetime string
                    code: INVALID_DATE

                validateToDate:
                  summary: Validate to date
                  value:
                    message: fromDate or toDate is not a valid datetime string
                    code: INVALID_DATE

                validatePage:
                  summary: Validate page
                  value:
                    message: page must be a `number` type
                    code: PAGE

                validateItemPerPage:
                  summary: Validate itemPerPage
                  value:
                    message: itemPerPage must be a `number` type
                    code: ITEMPERPAGE

        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  error:
                    type: string
              examples:
                tokenisRequired:
                  summary: Token is required
                  value:
                    message: Token is required
                    code: TOKEN_IS_REQUIRED
                expiredToken:
                  summary: Token expired
                  value:
                    message: Token expired
                    code: EXPIRED_TOKEN
                invalidToken:
                  summary: Invalid token
                  value:
                    message: Invalid token
                    code: INVALID_TOKEN
   
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Internal server error    
                  code:
                    type: string
                    example: INTERNAL_SERVER_ERROR
                  error:
                    type: object

  /admin/forgot-password:
    put:
      tags:
        - Admin
      summary: Forgot password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                loginId:
                  type: string
                  example: ph.anhduy1102@gmail.com
              required:
                - loginId

      responses:
        '200':
          description: Reset link sent to email.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Reset link sent to email.   
                  code:
                    type: string
                    example: FORGOT_PASSWORD
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  error:
                    type: string

              examples:
                validateLoginId:
                  summary: Validate type loginId
                  value:
                    message: Login ID is email
                    code: LOGINID
                validateLoginIdIsRequired:
                  summary: Validate required loginId
                  value:
                    message: Login ID is required
                    code: LOGINID
        '404':
          description: Not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Email is not exist  
                  code:
                    type: string
                    example: EMAIL_IS_NOT_EXIST
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Internal server error    
                  code:
                    type: string
                    example: INTERNAL_SERVER_ERROR
                  error:
                    type: object

  /admin/reset-password:
    put:
      tags:
        - Admin
      summary: Reset password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwidXNlckNvZGUiOiJQSEFEMUEyQjNDNCIsInVzZXJOYW1lIjoiZHV5cGhhIiwiZnVsbE5hbWUiOiJQaGFtIEhhaSBBbmggRHV5IiwiZW1haWwiOiJwaC5hbmhkdXkxMTAyQGdtYWlsLmNvbSIsImlhdCI6MTc0NjI1NDI4MiwiZXhwIjoxNzQ2MjU1MTgyfQ.g17AJZtZTqBF3Mc_SjU9PJrRd2w8q9Jxpa7jQKTvVzs
                password:
                  type: string
                  example: CzyVQ3709UdgswEmP6QUOfIcIPwG/8yVkbGKu9mmkmX0MftULEZV7sZiZDhCz18L3Edv/a3uUoxO9K0wSgGB4AI7k18BL9Fzpw2xxrEjgjueMgkCdHBN/E65hEjksqIlkkBDhrim32D03CuhDdGk4eKaQ8A2keL4yUOB3eo7BEcfqqTy0pJ+V7PQbjjyNcxZHKq1O1lvMGVuG0jrkLI6Ksrpb6IXhUNXpHWcLAM/hczQhMNkT/MofZpqZD2IpZ5BJdYrCWS5wa2gCCA04nF0fwDjq7YlTtg0AJ6rjfzBiJC2uSWKvA1HxfvI3Qxl+rQlD2+C5MfLGZ528EbAnOHuxw==
              required:
                - password
                - token

      responses:
        '200':
          description: Password reset successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: RESET_PASSWORD
                  message:
                    type: string
                    example: Password reset successfully.
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  error:
                    type: object
                    properties: 
                      code:
                        type: string
                      message:
                        type: string
              examples:
                validatePassword:
                  summary: Validate password
                  value:
                    message: Password is required / Password is unencrypted
                    code: PASSWORD

                validateToken:
                  summary: Validate token
                  value:
                    message: Token is required
                    code: TOKEN_IS_REQUIRED

        '404':
          description: Not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  code:
                    type: string

              examples:
                validateNotFound:
                  summary: Validate password
                  value:
                    message: Invalid or expired token
                    code: INVALID_OR_EXPIRED_TOKEN

        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Internal server error    
                  code:
                    type: string
                    example: INTERNAL_SERVER_ERROR
                  error:
                    type: object

  /admin/change-password:
    put:
      tags:
        - Admin
      summary: Update password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                oldPassword:
                  type: string
                  example: aDXHvUioWLJrEAOYAezLCSFv148VzKKl3ydZ0FpiaO6ItYtiyumlpvdjIqqg1oJsFgP5W5iK9L0oeyX55VlEN6j/CPTNCE4YyjGgqlj5dBvbq84HYtYep0Sxi380qJBJntYFCwH0ET3zOpfFVASlNzOIIKlWNVQ4dOmhVknJWBF5YiiyV8pSFFCOq8zG44Z1KlSESpZ4jZT4re6thVH9yRW0ZIPzGFVkAo6XaEEA4oLZH4U5goUZchZk/pqg73f+blxHsjFpWotOrKjAQIqOTTTCnzB5nOM5DRekjF5fgZsAvXz+U+Dnm3ZNueRTCKPTYXF1dUxlrdwvSM4wMc2xxQ==
                password:
                  type: string
                  example: aDXHvUioWLJrEAOYAezLCSFv148VzKKl3ydZ0FpiaO6ItYtiyumlpvdjIqqg1oJsFgP5W5iK9L0oeyX55VlEN6j/CPTNCE4YyjGgqlj5dBvbq84HYtYep0Sxi380qJBJntYFCwH0ET3zOpfFVASlNzOIIKlWNVQ4dOmhVknJWBF5YiiyV8pSFFCOq8zG44Z1KlSESpZ4jZT4re6thVH9yRW0ZIPzGFVkAo6XaEEA4oLZH4U5goUZchZk/pqg73f+blxHsjFpWotOrKjAQIqOTTTCnzB5nOM5DRekjF5fgZsAvXz+U+Dnm3ZNueRTCKPTYXF1dUxlrdwvSM4wMc2xxQ==
              required:
                - oldPassword
                - password

      responses:
        '200':
          description: Updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Change password successfully
                  code:
                    type: string
                    example: CHANGE_PASSWORD
                  token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IktEVkgzSDRQTlZMQU5aUU5JRjFQM0k5T0VJIiwibGFzdFBhc3N3b3JkQ2hhbmdlIjoxNzQ3NzUzMjY2MDAwLCJpYXQiOjE3NDc3NTM5NjgsImV4cCI6MTc0Nzc1NDU2OH0.6zfUwyLNm3IphWcXLnUEcyqOuY-Ynfo8cn9dX6-gpHA
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  error:
                    type: object
                    properties: 
                      code:
                        type: string
                      message:
                        type: string
              examples:
                validatePassword:
                  summary: Validate password
                  value:
                    message: Password is required / Password is unencrypted / Password must not match any of your recent passwords.
                    code: PASSWORD / PASSWORD_REUSE
                validateOldPassword:
                  summary: Validate old password
                  value:
                    message: Old password is required / Old Password is unencrypted
                    code: OLDPASSWORD
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  code:
                    type: string

              examples:
                tokenisRequired:
                  summary: Token is required
                  value:
                    message: Token is required
                    code: TOKEN_IS_REQUIRED
                expiredToken:
                  summary: Token expired
                  value:
                    message: Token expired
                    code: EXPIRED_TOKEN
                invalidToken:
                  summary: Invalid token
                  value:
                    message: Invalid token
                    code: INVALID_TOKEN
        '404':
          description: Not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User not found
                  code:
                    type: string
                    example: USER_NOT_FOUND
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Internal server error    
                  code:
                    type: string
                    example: INTERNAL_SERVER_ERROR
                  error:
                    type: object

  /admin/block:
    put:
      tags:
        - Admin
      summary: Block/Unblock admin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                  example: PHADXGNZ9JAS1Z3ZGFTC14B1IH
              required:
                - userId

      responses:
        '200':
          description: Block/Unblock user.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Update admin successfully.
                  code:
                    type: string
                    example: BLOCK_ADMIN / UNBLOCK_ADMIN
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  error:
                    type: string

              examples:
                validateUserId:
                  summary: Validate type userId
                  value:
                    message: User id is required / User id is exceed maxlengh
                    code: USERID

        '404':
          description: Not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User not found  
                  code:
                    type: string
                    example: USER_NOT_FOUND
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Internal server error
                  code:
                    type: string
                    example: INTERNAL_SERVER_ERROR
                  error:
                    type: object

  /login:
    post:
      tags:
        - Auth
      summary: Login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                loginId:
                  type: string
                  example: duypha@gmail.com
                password:
                  type: string
                  example: FsGxvhP0UHwA1nvTQP8W+xiAR39Qb19ojoLSwgDyog7sTNDu7Blp2b4KijJjyomzP7JolsbBe1dgr3/6jIKZ8vttQw5SdBpLbqSUm76JoNExhdETF5Xu086mXHtX2FrRPW3w/S+dK9Poy4kppd6xHEK1UaaC4jE9jPmXRhm2LjLPi1IqMggIt4GbW4qsYlZZFe4ER78hL64rDchdcm0EP96+tNAX0g4T3+4Oi3e6Ybn7a07HaP3mDPiSpipSA/P86wZubqTzf2dEYRe5cARpPoInEgZxB40XyNgzA710ggFdFDWA075uWOg1Ir5gJGpmRs8ru2MK6PXbKdscCU4E0w==
              required:
                - EmployeeId
                - password
      responses:
        '200':
          description: Login successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: LOGIN
                  message:
                    type: string
                    example: Login successfully
                  token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwidXNlckNvZGUiOiJQSEFEMUEyQjNDNCIsInVzZXJOYW1lIjoiZHV5cGhhIiwiZnVsbE5hbWUiOiJQaGFtIEhhaSBBbmggRHV5IiwiZW1haWwiOiJwaC5hbmhkdXkxMTAyQGdtYWlsLmNvbSIsImlhdCI6MTc0NjI2Mzc0NSwiZXhwIjoxNzQ2MjY0NjQ1fQ.bfHigSWgar_cS32tBBqYttrbUIwzszLb0HSr47ITjWw
                  refreshToken:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwidXNlckNvZGUiOiJQSEFEMUEyQjNDNCIsImlhdCI6MTc0NjI2Mzc0NSwiZXhwIjoxNzQ2ODY4NTQ1fQ.rpLFhyZAQE-2Dqy-oQx-XPeJ7s5MH8vDrj_Hd8YbBHg
        '401':
          description: Login failed
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  code:
                    type: string

              examples:
                loginIdIsNotExist:
                  summary: Login ID is not exist
                  value:
                    message: loginId is not exist
                    code: LOGINID_IS_NOT_EXIST
                validatePassword:
                  summary: Validate password
                  value:
                    message: Password is required / Password is unencrypted / Password greater than or equal 8 character length.
                    code: PASSWORD
                loginFailed:
                  summary: Incorrect Login ID or Password
                  value:
                    message: Login ID or Password is incorrect
                    code: LOGINID_OR_PASSWORD_IS_INCORRECT
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Internal server error
                  code:
                    type: string
                    example: INTERNAL_SERVER_ERROR
                  error:
                    type: object

  /logout:
    post:
      tags:
        - Auth
      summary: Logout

      responses:
        '200':
          description: Logout successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Logout successfully
                  code:
                    type: string
                    example: LOGOUT

        '404':
          description: Not found
          content:
            application/json:
              schema:
                type: object
                properties: 
                  code:
                    type: string
                    example: REFRESH_TOKEN_IS_NOT_EXIST
                  message:
                    type: string
                    example: Refresh Token is not exist
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Internal server error    
                  code:
                    type: string
                    example: INTERNAL_SERVER_ERROR
                  error:
                    type: object

  /refresh-token:
    post:
      tags:
        - Auth
      summary: Refresh token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                refreshToken:
                  type: string
                  example: FsGxvhP0UHwA1nvTQP8W+xiAR39Qb19ojoLSwgDyog7sTNDu7Blp2b4KijJjyomzP7JolsbBe1dgr3/6jIKZ8vttQw5SdBpLbqSUm76JoNExhdETF5Xu086mXHtX2FrRPW3w/S+dK9Poy4kppd6xHEK1UaaC4jE9jPmXRhm2LjLPi1IqMggIt4GbW4qsYlZZFe4ER78hL64rDchdcm0EP96+tNAX0g4T3+4Oi3e6Ybn7a07HaP3mDPiSpipSA/P86wZubqTzf2dEYRe5cARpPoInEgZxB40XyNgzA710ggFdFDWA075uWOg1Ir5gJGpmRs8ru2MK6PXbKdscCU4E0w==
              required:
                - refreshToken
      responses:
        '200':
          description: Refresh access token successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Refresh access token successfully
                  code:
                    type: string
                    example: REFRESH_TOKEN
                  token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwidXNlckNvZGUiOiJQSEFEMUEyQjNDNCIsInVzZXJOYW1lIjoiZHV5cGhhIiwiZnVsbE5hbWUiOiJQaGFtIEhhaSBBbmggRHV5IiwiZW1haWwiOiJwaC5hbmhkdXkxMTAyQGdtYWlsLmNvbSIsImlhdCI6MTc0Njk1OTk5MywiZXhwIjoxNzQ2OTYwODkzfQ.VPTa5PyTkedo-jPz6kFzXpKnG9ogYmq4CJysCI-hxjs
                  refreshToken:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwidXNlckNvZGUiOiJQSEFEMUEyQjNDNCIsImlhdCI6MTc0Njk1OTk5MCwiZXhwIjoxNzQ3NTY0NzkwfQ.ixaWXe3fwUU1tNEUv4HJRgMRZc9VlEatqfoeu2PKLRI
                   
        '400':
          description: Refresh token failed
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Refresh access token successfully
                  code:
                    type: string
                    example: REFRESH_TOKEN
                  token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwidXNlckNvZGUiOiJQSEFEMUEyQjNDNCIsInVzZXJOYW1lIjoiZHV5cGhhIiwiZnVsbE5hbWUiOiJQaGFtIEhhaSBBbmggRHV5IiwiZW1haWwiOiJwaC5hbmhkdXkxMTAyQGdtYWlsLmNvbSIsImlhdCI6MTc0Njk1OTk5MywiZXhwIjoxNzQ2OTYwODkzfQ.VPTa5PyTkedo-jPz6kFzXpKnG9ogYmq4CJysCI-hxjs
                  refreshToken:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwidXNlckNvZGUiOiJQSEFEMUEyQjNDNCIsImlhdCI6MTc0Njk1OTk5MCwiZXhwIjoxNzQ3NTY0NzkwfQ.ixaWXe3fwUU1tNEUv4HJRgMRZc9VlEatqfoeu2PKLRI
              examples:
                refreshTokenIsRequired:
                  summary: Refresh token is required
                  value:
                    message: Refresh token is required
                    code: REFRESHTOKEN
        '404':
          description: Refresh token failed
          content:
            application/json:
              schema:
                type: object
                properties: 
                  code:
                    type: string
                  message:
                    type: string
              examples:
                refreshTokenIsNotExist:
                  summary: Refresh Token is not exist
                  value:
                    message: Refresh Token is not exist
                    code: REFRESH_TOKEN_IS_NOT_EXIST
                refreshTokenIsExpired:
                  summary: Refresh Token is expired
                  value:
                    message: Refresh Token is expired
                    code: REFRESH_TOKEN_IS_EXPIRED        
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Internal server error    
                  code:
                    type: string
                    example: INTERNAL_SERVER_ERROR
                  error:
                    type: object

  /logs/list:
    get:
      tags:
        - Log
      summary: Get the list log
      parameters:
        - name: fromDate
          in: query
          schema:
            type: string
            example: 2025-05-02 00:00:00
        - name: toDate
          in: query
          schema:
            type: string
            example: 2025-05-04 23:59:59
        - name: searchString
          in: query
          schema:
            type: string
            example: duy.pha@trans-tech.vn
        - name: page
          in: query
          schema:
            type: number
            example: 1
          required: true
        - name: sortColumn
          in: query
          schema:
            type: string
            example: fullName
        - name: sortOrder
          in: query
          schema:
            type: string
            example: asc
        - name: itemPerPage
          in: query
          schema:
            type: number
            example: 5
          required: true

      responses:
        '200':
          description: Get the list log
          content:
            application/json:
              schema:
                type: object
                properties:
                  listLogs:
                    type: array
                    items: 
                      type: object
                      properties:
                        id:
                          type: number
                        action:
                          type: string
                        description:
                          type: string
                        timestamp:
                          type: string
                        user:
                          type: object
                          properties:
                            loginId:
                              type: string
                    example:
                      - id: 17
                        action: UPDATE USER
                        description: Change expired password
                        timestamp: 2025-05-03T07:16:57.000Z
                        user: 
                          loginId: ph.anhduy1102@gmail.com

                      - id: 15
                        action: DELETE USER
                        description: Delete the user tuitest
                        timestamp: 2025-05-03T04:35:58.000Z
                        user: 
                          loginId: ph.anhduy1102@gmail.com
                  currentPage:
                    type: number
                    example: 1
                  totalLogs:
                    type: number
                    example: 17
                  totalPages:
                    type: number
                    example: 6
                  itemPerPage:
                    type: number
                    example: 3
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  error:
                    type: object
                    properties: 
                      code:
                        type: string
                      message:
                        type: string
              examples:
                validateSortOrder:
                  summary: Validate sort order
                  value:
                    message: Order is invalid
                    code: SORTORDER

                validateSorColumn:
                  summary: Validate sort column
                  value:
                    message: Field is invalid
                    code: SORTCOLUMN

                validateFromDate:
                  summary: Validate from date
                  value:
                    message: fromDate or toDate is not a valid datetime string
                    code: INVALID_DATE

                validateToDate:
                  summary: Validate to date
                  value:
                    message: fromDate or toDate is not a valid datetime string
                    code: INVALID_DATE

                validatePage:
                  summary: Validate page
                  value:
                    message: page must be a `number` type
                    code: PAGE

                validateItemPerPage:
                  summary: Validate itemPerPage
                  value:
                    message: itemPerPage must be a `number` type
                    code: ITEMPERPAGE

        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  error:
                    type: string
              examples:
                tokenisRequired:
                  summary: Token is required
                  value:
                    message: Token is required
                    code: TOKEN_IS_REQUIRED
                expiredToken:
                  summary: Token expired
                  value:
                    message: Token expired
                    code: EXPIRED_TOKEN
                invalidToken:
                  summary: Invalid token
                  value:
                    message: Invalid token
                    code: INVALID_TOKEN
   
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Internal server error    
                  code:
                    type: string
                    example: INTERNAL_SERVER_ERROR
                  error:
                    type: object
